---
alwaysApply: true
---
This rule defines the default structure and technology stack for this project, which is a Quasar-based Progressive Web App using Vue 3, TypeScript and PocketBase as backend. Useful when generating files, setting up pages, or creating collections.
Rules:
    • This project is a Progressive Web App (PWA) built with Quasar Framework, Vue 3 and TypeScript.
    • Use PocketBase as the backend.
    • Use Capacitor only for PWA-specific features, not for native mobile development.
    • Use notifications, even without a state management library.
    • Do not use Pinia unless multiple components require access to shared state (e.g. notifications or user info).

Defines how AppMenu and UserMenu should be structured and separated. Useful when generating views or organizing feature folders.
Rules:
    • The layout uses a QDrawer on the left for AppMenu and on the right for UserMenu.
    • Files must be organized in folders that match the menu structure (AppMenu and UserMenu).
    • AppMenu components are for displaying informational (read-only) views.
    • UserMenu components are used for creating, editing, and deleting records (CRUD).
    • Store PocketBase collections in separate files and group them via an index.ts file.
Tags: @/layouts, @/pages/appmenu, @/pages/usermenu

All generated code must include clear comments for both logic and layout, to help Cursor and other developers understand the structure.

---

Enforce standardized i18n usage in Vue files:
Rules:
    • Always use `useI18n` imported from 'vue-i18n' in any file that uses translations.
    • Always destructure `t` as `$customT` using: `const { t: $customT } = useI18n();`.
    • In <template> sections, translations must always use `$customT('key')`. `$t('key')` is forbidden.
    • In <script> sections, translations must always use `$customT('key')`. Bare `t('key')` calls are forbidden.
    • Never import `$customT` directly from any module.
    • If `$customT` is missing in a file with translations, add `const { t: $customT } = useI18n();` in <script setup>.
    • Automatically rewrite any `$t(` or `t(` calls to `$customT(` when generating or modifying code.
    • Ensure `src/types/vue.d.ts` includes proper type augmentation for `$customT`.
    • Validate that keys passed to `$customT` exist in both `nl.json` and `en.json` and flag missing keys.
Tags: @/boot/i18n, @/i18n, @/types/vue